{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Flare",
	"scopeName": "source.fr",
	"fileTypes": ["fr"],
	"firstLineMatch": "^#!\/.*\\bflare",
	"foldingStartMarker": "(?x)^(\\s*+(annotation|module|class|def|type(?!.*\\bend\\s*$)|unless|if|case|begin|for|while|until|record|^=begin|(\"(\\\\.|[^\"])*+\"|'(\\\\.|[^'])*+'|[^#\"'])*(\\s(do|begin|case|{)|(?<!\\$)[-+=&|*\/~%^<>~]\\s*+(if|unless)))\\b(?![^;]*+;.*?\\b(end|})\\b)|(\"(\\\\.|[^\"])*+\"|'(\\\\.|[^'])*+'|[^#\"'])*(\\{(?![^}]*+\\})|\\[(?![^\\]]*+\\]))).*$|[#].*?\\(fold\\)\\s*+$",
	"foldingStopMarker": "(?x)((^|;)\\s*+end\\s*+([#].*)?$|(^|;)\\s*+end\\..*$|^\\s*+[}\\]] ,?\\s*+([#].*)?$|[#].*?\\(end\\)\\s*+$|^=end)",
	"keyEquivalent": "^~R",
	"patterns": [
		{
			"captures": {
				"1": {
					"name": "keyword.control.class.fr"
				},
				"2": {
					"name": "keyword.control.class.fr"
				},
				"3": {
					"name": "entity.name.type.class.fr"
				},
				"5": {
					"name": "punctuation.separator.fr"
				},
				"6": {
					"name": "support.class.other.type-param.fr"
				},
				"7": {
					"name": "entity.other.inherited-class.fr"
				},
				"8": {
					"name": "punctuation.separator.fr"
				},
				"9": {
					"name": "punctuation.separator.fr"
				},
				"10": {
					"name": "support.class.other.type-param.fr"
				},
				"11": {
					"name": "punctuation.definition.variable.fr"
				}
			},
			"match": "(?x)^\\s*(abstract)?\\s*(type|class|struct|union|annotation)\\s+(([.A-Z_:\\x{80}-\\x{10FFFF}][.\\w:\\x{80}-\\x{10FFFF}]*(\\(([,\\s.a-zA-Z0-9_:\\x{80}-\\x{10FFFF}]+)\\))?(\\s*(<)\\s*[.:A-Z\\x{80}-\\x{10FFFF}][.:\\w\\x{80}-\\x{10FFFF}]*(\\(([.a-zA-Z0-9_:]+\\s,)\\))?)?)|((<<)\\s*[.A-Z0-9_:\\x{80}-\\x{10FFFF}]+))",
			"name": "meta.class.fr"
		},
		{
			"captures": {
				"1": {
					"name": "keyword.control.module.fr"
				},
				"2": {
					"name": "entity.name.type.module.fr"
				},
				"3": {
					"name": "entity.other.inherited-class.module.first.fr"
				},
				"4": {
					"name": "punctuation.separator.inheritance.fr"
				},
				"5": {
					"name": "entity.other.inherited-class.module.second.fr"
				},
				"6": {
					"name": "punctuation.separator.inheritance.fr"
				},
				"7": {
					"name": "entity.other.inherited-class.module.third.fr"
				},
				"8": {
					"name": "punctuation.separator.inheritance.fr"
				}
			},
			"match": "^\\s*(module)\\s+(([A-Z\\x{80}-\\x{10FFFF}][\\w\\x{80}-\\x{10FFFF}]*(::))?([A-Z\\x{80}-\\x{10FFFF}][\\w\\x{80}-\\x{10FFFF}]*(::))?([A-Z\\x{80}-\\x{10FFFF}][\\w\\x{80}-\\x{10FFFF}]*(::))*[A-Z\\x{80}-\\x{10FFFF}][\\w\\x{80}-\\x{10FFFF}]*)",
			"name": "meta.module.fr"
		},
		{
			"captures": {
				"1": {
					"name": "keyword.control.lib.fr"
				},
				"2": {
					"name": "entity.name.type.lib.fr"
				},
				"3": {
					"name": "entity.other.inherited-class.lib.first.fr"
				},
				"4": {
					"name": "punctuation.separator.inheritance.fr"
				},
				"5": {
					"name": "entity.other.inherited-class.lib.second.fr"
				},
				"6": {
					"name": "punctuation.separator.inheritance.fr"
				},
				"7": {
					"name": "entity.other.inherited-class.lib.third.fr"
				},
				"8": {
					"name": "punctuation.separator.inheritance.fr"
				}
			},
			"match": "^\\s*(lib)\\s+(([A-Z]\\w*(::))?([A-Z]\\w*(::))?([A-Z]\\w*(::))*[A-Z]\\w*)",
			"name": "meta.lib.fr"
		},
		{
			"captures": {
				"1": {
					"name": "keyword.control.lib.type.fr"
				},
				"2": {
					"name": "entity.name.lib.type.fr"
				},
				"3": {
					"name": "keyword.control.lib.fr"
				},
				"4": {
					"name": "entity.name.lib.type.value.fr"
				}
			},
			"comment": "type in lib",
			"match": "(?<!\\.)\\b(type)\\s+([A-Z]\\w+)\\s*(=)\\s*(.+)",
			"name": "meta.lib.type.fr"
		},
		{
			"comment": "everything being a reserved word, not a value and needing a 'end' is a..",
			"match": "(?<!\\.)\\b(fun|begin|case|class|else|elsif|end|ensure|for|if|in|module|rescue|then|unless|until|when|while)\\b(?![?!])",
			"name": "keyword.control.fr"
		},
		{
			"comment": "everything being a reserved word, not a value and needing a 'end' is a..",
			"match": "(?<!\\.)\\b(as|abstract|ensure|fun|in|lib|of|out|previous_def|private|protected|type|async|struct|with|union|enum|macro|select|record)\\b(?![?!])",
			"name": "keyword.control.primary.fr"
		},
		{
			"comment": "contextual smart pair support for block parameters",
			"match": "(?<!\\.)\\bdo\\b\\s*",
			"name": "keyword.control.start-block.fr"
		},
		{
			"comment": "contextual smart pair support",
			"match": "(?<=\\{)(\\s+)",
			"name": "meta.syntax.fr.start-block"
		},
		{
			"comment": "Just as above but being not a logical operation",
			"match": "(?<!\\.)\\b(asm|alias|alias_method|break|next|pointerof|typeof|sizeof|instance_sizeof|return|super|yield|uninitialized)\\b(?![?!])",
			"name": "keyword.control.pseudo-method.fr"
		},
		{
			"match": "\\bnil\\b(?![?!])",
			"name": "constant.language.nil.fr"
		},
		{
			"match": "\\b(true|false)\\b(?![?!])",
			"name": "constant.language.boolean.fr"
		},
		{
			"match": "\\b(__(FILE|LINE|DIR)__)\\b(?![?!])",
			"name": "variable.language.fr"
		},
		{
			"match": "\\bself\\b(?![?!])",
			"name": "variable.language.self.fr"
		},
		{
			"comment": "Everything being a method but having a special function is a..",
			"match": "\\b(initialize|new|loop|include|extend|raise|getter|setter|property|class_getter|class_setter|class_property|describe|it|with|delegate|def_hash|def_equals|def_equals_and_hash|forward_missing_to|assert_responds_to|spawn|finalize)\\b[!?]?",
			"name": "keyword.other.special-method.fr"
		},
		{
			"begin": "\\b(require)\\b",
			"captures": {
				"1": {
					"name": "keyword.other.special-method.fr"
				}
			},
			"end": "$|(?=#)",
			"name": "meta.require.fr",
			"patterns": [
				{
					"include": "$self"
				}
			]
		},
		{
			"captures": {
				"1": {
					"name": "punctuation.definition.variable.fr"
				}
			},
			"match": "(@)[a-zA-Z_\\x{80}-\\x{10FFFF}][\\w\\x{80}-\\x{10FFFF}]*[?!=]?",
			"name": "variable.other.readwrite.instance.fr"
		},
		{
			"captures": {
				"1": {
					"name": "punctuation.definition.variable.fr"
				}
			},
			"match": "(@@)[a-zA-Z_\\x{80}-\\x{10FFFF}][\\w\\x{80}-\\x{10FFFF}]*[?!=]?",
			"name": "variable.other.readwrite.class.fr"
		},
		{
			"captures": {
				"1": {
					"name": "punctuation.definition.variable.fr"
				}
			},
			"match": "(\\$)[a-zA-Z_]\\w*",
			"name": "variable.other.readwrite.global.fr"
		},
		{
			"captures": {
				"1": {
					"name": "punctuation.definition.variable.fr"
				}
			},
			"match": "(\\%)([a-zA-Z_]\\w*\\.)*[a-zA-Z_]\\w*",
			"name": "variable.other.readwrite.fresh.fr"
		},
		{
			"captures": {
				"1": {
					"name": "punctuation.definition.variable.fr"
				}
			},
			"match": "(\\$)(!|@|&|`|'|\\+|\\d+|~|=|\/|\\\\|,|;|\\.|<|>|_|\\*|\\$|\\?|:|\"|-[0adFiIlpv])",
			"name": "variable.other.readwrite.global.pre-defined.fr"
		},
		{
			"begin": "\\b(ENV)\\[",
			"beginCaptures": {
				"1": {
					"name": "variable.other.constant.fr"
				}
			},
			"end": "\\]",
			"name": "meta.environment-variable.fr",
			"patterns": [
				{
					"include": "$self"
				}
			]
		},
		{
			"match": "\\b[_A-Z]+\\b",
			"name": "variable.other.constant.fr",
			"comment": "Constant name in any where"
		},
		{
			"match": "\\b[A-Z\\x{80}-\\x{10FFFF}][\\w\\x{80}-\\x{10FFFF}]*",
			"name": "support.class.fr",
			"commenct": "Literals name of Crystal"
		},
		{
			"match": "\\b(abort|at_exit|caller|delay|exit|fork|future|lazy|loop|main|p|pp|print|printf|puts|rand|read_line|sleep|spawn|sprintf|system|with_color|debugger)\\b[!?]?",
			"name": "support.function.kernel.fr",
			"comment": "Fetch from https://crystal-lang.org/api/0.27.0/toplevel.html"
		},
		{
			"begin": "(?x)\n(?=def\\b)                          # optimization to help Oniguruma fail fast\n(?<=^|\\s)(def)\\s+\n(\n  (?>[a-zA-Z_]\\w*(?>\\.|::))?      # method prefix\n  (?>                               # method name\n    [a-zA-Z_]\\w*(?>[?!]|=(?!>))?\n    |\n    \\^|===?|!=|>[>=]?|<=>|<[<=]?|[%&`/\\|]|\\*\\*?|=?~|[-+]@?|\\[][?=]?|\\[]=?\n  )\n)\n\\s*(\\()",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.def.fr"
				},
				"2": {
					"name": "entity.name.function.fr"
				},
				"3": {
					"name": "punctuation.definition.parameters.fr"
				}
			},
			"comment": "The method pattern comes from the symbol pattern. See there for an explanation.",
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.parameters.fr"
				}
			},
			"name": "meta.function.method.with-arguments.fr",
			"patterns": [
				{
					"begin": "(?![\\s,)])",
					"end": "(?=,|\\)\\s*$)",
					"patterns": [
						{
							"captures": {
								"1": {
									"name": "storage.type.variable.fr"
								},
								"2": {
									"name": "constant.language.symbol.hashkey.parameter.function.fr"
								},
								"3": {
									"name": "punctuation.definition.constant.hashkey.fr"
								},
								"4": {
									"name": "variable.parameter.function.fr"
								}
							},
							"match": "\\G([&*]?)(?:([_a-zA-Z]\\w*(:))|([_a-zA-Z]\\w*))"
						},
						{
							"include": "$self"
						}
					]
				}
			]
		},
		{
			"captures": {
				"1": {
					"name": "keyword.control.def.fr"
				},
				"3": {
					"name": "entity.name.function.fr"
				}
			},
			"comment": " the optional name is just to catch the def also without a method-name",
			"match": "(?x)\n(?=def\\b)                            # optimization to help Oniguruma fail fast\n(?<=^|\\s)(def)\\b\n(\n  \\s+\n  (\n    (?>[a-zA-Z_]\\w*(?>\\.|::))?      # method prefix\n    (?>                               # method name\n      [a-zA-Z_]\\w*(?>[?!]|=(?!>))?\n      |\n      \\^|===?|!=|>[>=]?|<=>|<[<=]?|[%&`/\\|]|\\*\\*?|=?~|[-+]@?|\\[][?=]?|\\[]=?\n    )\n  )\n)?",
			"name": "meta.function.method.without-arguments.fr"
		},
		{
			"match": "(?x)\n\\b\n(\n  [\\d](?>_?\\d)*                             # 100_000\n  (\\.(?![^[:space:][:digit:]])(?>_?\\d)*)?   # fractional part\n  ([eE][-+]?\\d(?>_?\\d)*)?                   # 1.23e-4\n  |\n  0\n  (?:\n    [xX]\\h(?>_?\\h)*|\n    [oO]?[0-7](?>_?[0-7])*|\n    [bB][01](?>_?[01])*|\n    [dD]\\d(?>_?\\d)*\n  )                                           # A base indicator can only be used with an integer\n)\\b",
			"name": "constant.numeric.fr"
		},
		{
			"begin": ":'",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.symbol.begin.fr"
				}
			},
			"comment": "symbol literal with '' delimitor",
			"end": "'",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.symbol.end.fr"
				}
			},
			"name": "constant.language.symbol.fr",
			"patterns": [
				{
					"match": "\\\\['\\\\]",
					"name": "constant.character.escape.fr"
				}
			]
		},
		{
			"begin": ":\"",
			"beginCaptures": {
				"0": {
					"name": "punctuation.section.symbol.begin.fr"
				}
			},
			"comment": "symbol literal with \"\" delimitor",
			"end": "\"",
			"endCaptures": {
				"0": {
					"name": "punctuation.section.symbol.end.fr"
				}
			},
			"name": "constant.language.symbol.interpolated.fr",
			"patterns": [
				{
					"include": "#interpolated_crystal"
				},
				{
					"include": "#escaped_char"
				}
			]
		},
		{
			"comment": "Needs higher precidence than regular expressions.",
			"match": "(?<!\\()/=",
			"name": "keyword.operator.assignment.augmented.fr"
		},
		{
			"begin": "'",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.fr"
				}
			},
			"comment": "string literal with '' delimitor",
			"end": "'",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.fr"
				}
			},
			"name": "string.quoted.single.fr",
			"patterns": [
				{
					"match": "\\\\'|\\\\\\\\",
					"name": "constant.character.escape.fr"
				}
			]
		},
		{
			"begin": "\"",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.fr"
				}
			},
			"comment": "string literal with interpolation and \"\" delimitor",
			"end": "\"",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.fr"
				}
			},
			"name": "string.quoted.double.interpolated.fr",
			"patterns": [
				{
					"include": "#interpolated_crystal"
				},
				{
					"include": "#escaped_char"
				}
			]
		},
		{
			"begin": "`",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.fr"
				}
			},
			"comment": "execute string (allows for interpolation)",
			"end": "`",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.fr"
				}
			},
			"name": "string.interpolated.fr",
			"patterns": [
				{
					"include": "#interpolated_crystal"
				},
				{
					"include": "#escaped_char"
				}
			]
		},
		{
			"begin": "(?x) (?: ^| (?<=[=>~(?:\\[,|&;] | [\\s;]if\\s| [\\s;]elsif\\s | [\\s;]while\\s | [\\s;]unless\\s | [\\s;]when\\s | [\\s;]assert_match\\s | [\\s;]or\\s| [\\s;]and\\s | [\\s;]not\\s | [\\s.]index\\s| [\\s.]scan\\s | [\\s.]sub\\s | [\\s.]sub!\\s | [\\s.]gsub\\s | [\\s.]gsub!\\s | [\\s.]match\\s ) | (?<=^when\\s| ^if\\s | ^elsif\\s | ^while\\s | ^unless\\s ) ) \\s*((\/))(?![*+{}?])",
			"captures": {
				"1": {
					"name": "string.regexp.classic.fr"
				},
				"2": {
					"name": "punctuation.definition.string.fr"
				}
			},
			"comment": "regular expressions (normal) we only start a regexp if the character before it (excluding whitespace) is what we think is before a regexp",
			"contentName": "string.regexp.classic.fr",
			"end": "((\/[eimnosux]*))",
			"patterns": [
				{
					"include": "#regex_sub"
				}
			]
		},
		{
			"captures": {
				"1": {
					"name": "punctuation.definition.constant.fr"
				}
			},
			"comment": "symbols",
			"match": "(?<!:)(:)(?>[a-zA-Z_\\x{80}-\\x{10FFFF}][\\w\\x{80}-\\x{10FFFF}]*(?>[?!]|=(?![>=]))?|===?|>[>=]?|<[<=]?|<=>|[%&`\/\\|]|\\*\\*?|=?~|[-+]@?|\\[\\]=?|@@?[a-zA-Z_\\x{80}-\\x{10FFFF}][\\w\\x{80}-\\x{10FFFF}]*)",
			"name": "constant.other.symbol.fr"
		},
		{
			"captures": {
				"1": {
					"name": "punctuation.definition.constant.fr"
				}
			},
			"comment": "symbols",
			"match": "(?>[a-zA-Z_\\x{80}-\\x{10FFFF}][\\w\\x{80}-\\x{10FFFF}]*(?>[?!])?)(:)(?!:)",
			"name": "constant.other.symbol.fr.19syntax"
		},
		{
			"captures": {
				"1": {
					"name": "punctuation.definition.comment.fr"
				}
			},
			"match": "(?:^[ \\t]+)?(#).*$\\n?",
			"name": "comment.line.number-sign.fr"
		},
		{
			"begin": "(?<={|{\\s|[^A-Za-z0-9_]do|^do|[^A-Za-z0-9_]do\\s|^do\\s)(\\|)",
			"captures": {
				"1": {
					"name": "punctuation.separator.variable.fr"
				}
			},
			"end": "(?<!\\|)(\\|)(?!\\|)",
			"patterns": [
				{
					"include": "source.fr"
				},
				{
					"match": "[_a-zA-Z][_a-zA-Z0-9]*",
					"name": "variable.other.block.fr"
				},
				{
					"match": ",",
					"name": "punctuation.separator.variable.fr"
				}
			]
		},
		{
			"match": "=>",
			"name": "punctuation.separator.key-value"
		},
		{
			"match": "->",
			"name": "support.function.kernel.fr"
		},
		{
			"match": "<<=|%=|&{1,2}=|\\*=|\\*\\*=|\\+=|-=|\\^=|\\|{1,2}=|<<",
			"name": "keyword.operator.assignment.augmented.fr"
		},
		{
			"match": "<=>|<(?!<|=)|>(?!<|=|>)|<=|>=|===|==|=~|!=|!~|(?<=[ \\t])\\?",
			"name": "keyword.operator.comparison.fr"
		},
		{
			"match": "(?<!\\.)\\b(and|not|or)\\b(?![?!])",
			"name": "keyword.operator.logical.fr"
		},
		{
			"match": "(?<=^|[ \\t])!|&&|\\|\\||\\^",
			"name": "keyword.operator.logical.fr"
		},
		{
			"match": "(\\{\\%|\\%\\}|\\{\\{|\\}\\})",
			"name": "keyword.operator.macro.fr"
		},
		{
			"comment": "Safe navigation operator",
			"match": "(&\\.)\\s*(?![A-Z])",
			"captures": {
				"1": {
					"name": "punctuation.separator.method.fr"
				}
			}
		},
		{
			"match": "(%|&|\\*\\*|\\*|\\+|\\-|\/)",
			"name": "keyword.operator.arithmetic.fr"
		},
		{
			"match": "=",
			"name": "keyword.operator.assignment.fr"
		},
		{
			"match": "\\||~|>>",
			"name": "keyword.operator.other.fr"
		},
		{
			"match": ":",
			"name": "punctuation.separator.other.fr"
		},
		{
			"match": "\\;",
			"name": "punctuation.separator.statement.fr"
		},
		{
			"match": ",",
			"name": "punctuation.separator.object.fr"
		},
		{
			"match": "\\.|::",
			"name": "punctuation.separator.method.fr"
		},
		{
			"match": "\\{|\\}",
			"name": "punctuation.section.scope.fr"
		},
		{
			"match": "\\[|\\]",
			"name": "punctuation.section.array.fr"
		},
		{
			"match": "\\(|\\)",
			"name": "punctuation.section.function.fr"
		},
		{
			"begin": "(?=[a-zA-Z0-9_!?]+\\()",
			"end": "(?<=\\))",
			"name": "meta.function-call.fr",
			"patterns": [
				{
					"include": "#nest_function_parens"
				},
				{
					"include": "#known_function_names"
				},
				{
					"match": "([a-zA-Z0-9_!?]+)(?=\\()",
					"name": "entity.name.function.fr"
				},
				{
					"include": "$self"
				}
			]
		},
		{
			"comment": "This is kindof experimental. There really is no way to perfectly match all regular variables, but you can pretty well assume that any normal word in certain curcumstances that havnt already been scoped as something else are probably variables, and the advantages beat the potential errors",
			"match": "((?<=\\W)\\b|^)\\w+\\b(?=\\s*([\\]\\)\\}\\=\\+\\-\\*\\/\\^\\$\\,\\.]|<\\s|<<[\\s|\\.]))",
			"name": "variable.other.fr"
		}
	],
	"repository": {
		"escaped_char": {
			"match": "\\\\(?:[0-7]{1,3}|x[\\da-fA-F]{1,2}|.)",
			"name": "constant.character.escape.fr"
		},
		"heredoc": {
			"begin": "^<<-?\\w+",
			"end": "$",
			"patterns": [
				{
					"include": "$self"
				}
			]
		},
		"interpolated_crystal": {
			"patterns": [
				{
					"begin": "#\\{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.section.embedded.begin.fr"
						}
					},
					"contentName": "source.fr",
					"end": "(\\})",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.embedded.end.fr"
						},
						"1": {
							"name": "source.fr"
						}
					},
					"name": "meta.embedded.line.fr",
					"patterns": [
						{
							"include": "#nest_curly_and_self"
						},
						{
							"include": "$self"
						}
					],
					"repository": {
						"nest_curly_and_self": {
							"patterns": [
								{
									"begin": "\\{",
									"captures": {
										"0": {
											"name": "punctuation.section.scope.fr"
										}
									},
									"end": "\\}",
									"patterns": [
										{
											"include": "#nest_curly_and_self"
										}
									]
								},
								{
									"include": "$self"
								}
							]
						}
					}
				},
				{
					"captures": {
						"1": {
							"name": "punctuation.definition.variable.fr"
						}
					},
					"match": "(#@)[a-zA-Z_]\\w*",
					"name": "variable.other.readwrite.instance.fr"
				},
				{
					"captures": {
						"1": {
							"name": "punctuation.definition.variable.fr"
						}
					},
					"match": "(#@@)[a-zA-Z_]\\w*",
					"name": "variable.other.readwrite.class.fr"
				},
				{
					"captures": {
						"1": {
							"name": "punctuation.definition.variable.fr"
						}
					},
					"match": "(#\\$)[a-zA-Z_]\\w*",
					"name": "variable.other.readwrite.global.fr"
				}
			]
		},
		"nest_brackets": {
			"begin": "\\[",
			"captures": [
				{
					"name": "punctuation.section.scope.fr"
				}
			],
			"end": "\\]",
			"patterns": [
				{
					"include": "#nest_brackets"
				}
			]
		},
		"nest_brackets_i": {
			"begin": "\\[",
			"captures": [
				{
					"name": "punctuation.section.scope.fr"
				}
			],
			"end": "\\]",
			"patterns": [
				{
					"include": "#interpolated_crystal"
				},
				{
					"include": "#escaped_char"
				},
				{
					"include": "#nest_brackets_i"
				}
			]
		},
		"nest_brackets_r": {
			"begin": "\\[",
			"captures": [
				{
					"name": "punctuation.section.scope.fr"
				}
			],
			"end": "\\]",
			"patterns": [
				{
					"include": "#regex_sub"
				},
				{
					"include": "#nest_brackets_r"
				}
			]
		},
		"nest_curly": {
			"begin": "\\{",
			"captures": [
				{
					"name": "punctuation.section.scope.fr"
				}
			],
			"end": "\\}",
			"patterns": [
				{
					"include": "#nest_curly"
				}
			]
		},
		"nest_curly_and_self": {
			"patterns": [
				{
					"begin": "\\{",
					"captures": [
						{
							"name": "punctuation.section.scope.fr"
						}
					],
					"end": "\\}",
					"patterns": [
						{
							"include": "#nest_curly_and_self"
						}
					]
				},
				{
					"include": "$self"
				}
			]
		},
		"nest_curly_i": {
			"begin": "\\{",
			"captures": [
				{
					"name": "punctuation.section.scope.fr"
				}
			],
			"end": "\\}",
			"patterns": [
				{
					"include": "#interpolated_crystal"
				},
				{
					"include": "#escaped_char"
				},
				{
					"include": "#nest_curly_i"
				}
			]
		},
		"nest_curly_r": {
			"begin": "\\{",
			"captures": [
				{
					"name": "punctuation.section.scope.fr"
				}
			],
			"end": "\\}",
			"patterns": [
				{
					"include": "#regex_sub"
				},
				{
					"include": "#nest_curly_r"
				}
			]
		},
		"nest_ltgt": {
			"begin": "\\<",
			"captures": [
				{
					"name": "punctuation.section.scope.fr"
				}
			],
			"end": "\\>",
			"patterns": [
				{
					"include": "#nest_ltgt"
				}
			]
		},
		"nest_ltgt_i": {
			"begin": "\\<",
			"captures": [
				{
					"name": "punctuation.section.scope.fr"
				}
			],
			"end": "\\>",
			"patterns": [
				{
					"include": "#interpolated_crystal"
				},
				{
					"include": "#escaped_char"
				},
				{
					"include": "#nest_ltgt_i"
				}
			]
		},
		"nest_ltgt_r": {
			"begin": "\\<",
			"captures": [
				{
					"name": "punctuation.section.scope.fr"
				}
			],
			"end": "\\>",
			"patterns": [
				{
					"include": "#regex_sub"
				},
				{
					"include": "#nest_ltgt_r"
				}
			]
		},
		"nest_parens": {
			"begin": "\\(",
			"captures": [
				{
					"name": "punctuation.section.scope.fr"
				}
			],
			"end": "\\)",
			"patterns": [
				{
					"include": "#nest_parens"
				}
			]
		},
		"nest_parens_i": {
			"begin": "\\(",
			"captures": [
				{
					"name": "punctuation.section.scope.fr"
				}
			],
			"end": "\\)",
			"patterns": [
				{
					"include": "#interpolated_crystal"
				},
				{
					"include": "#escaped_char"
				},
				{
					"include": "#nest_parens_i"
				}
			]
		},
		"nest_parens_r": {
			"begin": "\\(",
			"captures": [
				{
					"name": "punctuation.section.scope.fr"
				}
			],
			"end": "\\)",
			"patterns": [
				{
					"include": "#regex_sub"
				},
				{
					"include": "#nest_parens_r"
				}
			]
		},
		"regex_sub": {
			"patterns": [
				{
					"include": "#interpolated_crystal"
				},
				{
					"include": "#escaped_char"
				},
				{
					"captures": {
						"1": {
							"name": "punctuation.definition.arbitrary-repetition.fr"
						},
						"3": {
							"name": "punctuation.definition.arbitrary-repetition.fr"
						}
					},
					"match": "({)\\d+(,\\d+)?(})",
					"name": "string.regexp.arbitrary-repetition.fr"
				},
				{
					"begin": "\\[(?:\\^?])?",
					"captures": {
						"0": {
							"name": "punctuation.definition.character-class.fr"
						}
					},
					"end": "]",
					"name": "string.regexp.character-class.fr",
					"patterns": [
						{
							"include": "#escaped_char"
						}
					]
				},
				{
					"captures": {
						"1": {
							"name": "punctuation.definition.comment.fr"
						}
					},
					"comment": "We are restrictive in what we allow to go after the comment character to avoid false positives, since the availability of comments depend on regexp flags.",
					"match": "(?<=^|\\s)(#)\\s[[a-zA-Z0-9,. \\t?!-][^\\x{00}-\\x{7F}]]*$",
					"name": "comment.line.number-sign.fr"
				}
			]
		}
	}
}